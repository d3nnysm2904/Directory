{"ast":null,"code":"var _jsxFileName = \"/home/d3nnysm2904/directory/escuela/back End/REACT/router_history/context/react-context-demo/deadly-doubles/demo-casino/src/Table.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Table.css\";\n\n/** Table at a casino.\n *\n * Each table plays a game (Deadly Doubles, Psychic Dice, etc)\n *\n * This is a generic class --- it wraps the specific game with the ability\n * to keep track of wins/losses, and shows all the \"sets\" of the game (ie,\n * each individual hand of the game).\n *\n * Props:\n * - there *could* be props, but the class is agnostic about it. Whatever\n *   props it receives, it passes to the underlying game.\n *\n * State:\n * - gameStates: array of [\"won\", \"won\", \"lost\", ...] for already-decided sets\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table(props) {\n  _s();\n  const [gameStates, setGameStates] = useState([]);\n  function addWin() {\n    setGameStates(states => [...states, \"won\"]);\n  }\n  function addLoss() {\n    setGameStates(states => [...states, \"lost\"]);\n  }\n  const wins = gameStates.filter(st => st === \"won\").length;\n  const losses = gameStates.length - wins;\n\n  /** render \"sets\" of the game, along with win/loss summary */\n\n  // get list of already-won/lost sets [if any]\n  let sets = gameStates.map((gs, idx) => /*#__PURE__*/_jsxDEV(props.game, {\n    gameState: gs,\n    ...props\n  }, idx, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this));\n\n  // add new set\n  sets.push( /*#__PURE__*/_jsxDEV(props.game, {\n    addWin: addWin,\n    addLoss: addLoss,\n    ...props\n  }, sets.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: props.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wins: \", wins, \" \\u2014 Losses: \", losses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), sets.reverse()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Table, \"J7kEEKpPEPfrnF1kakcv8lbN8EU=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","Table","props","gameStates","setGameStates","addWin","states","addLoss","wins","filter","st","length","losses","sets","map","gs","idx","push","title","description","reverse"],"sources":["/home/d3nnysm2904/directory/escuela/back End/REACT/router_history/context/react-context-demo/deadly-doubles/demo-casino/src/Table.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Table.css\";\n\n/** Table at a casino.\n *\n * Each table plays a game (Deadly Doubles, Psychic Dice, etc)\n *\n * This is a generic class --- it wraps the specific game with the ability\n * to keep track of wins/losses, and shows all the \"sets\" of the game (ie,\n * each individual hand of the game).\n *\n * Props:\n * - there *could* be props, but the class is agnostic about it. Whatever\n *   props it receives, it passes to the underlying game.\n *\n * State:\n * - gameStates: array of [\"won\", \"won\", \"lost\", ...] for already-decided sets\n *\n */\n\nfunction Table(props) {\n  const [gameStates, setGameStates] = useState([]);\n  function addWin() {\n    setGameStates(states => [...states, \"won\"]);\n  }\n  function addLoss() {\n    setGameStates(states => [...states, \"lost\"]);\n  }\n  const wins = gameStates.filter(st => st === \"won\").length;\n  const losses = gameStates.length - wins;\n\n  /** render \"sets\" of the game, along with win/loss summary */\n\n  // get list of already-won/lost sets [if any]\n  let sets = gameStates.map((gs, idx) => (\n    <props.game key={idx} gameState={gs} {...props} />\n  ));\n\n  // add new set\n  sets.push(\n    <props.game\n      key={sets.length}\n      addWin={addWin}\n      addLoss={addLoss}\n      {...props}\n    />\n  );\n\n  return (\n    <div className=\"Table\">\n      <h2>{props.title}</h2>\n      <p>\n        <i>{props.description}</i>\n      </p>\n      <p>\n        Wins: {wins} &mdash; Losses: {losses}\n      </p>\n      {sets.reverse()}\n    </div>\n  );\n}\n\nexport default Table;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA,SAASC,KAAK,CAACC,KAAK,EAAE;EAAA;EACpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAChD,SAASK,MAAM,GAAG;IAChBD,aAAa,CAACE,MAAM,IAAI,CAAC,GAAGA,MAAM,EAAE,KAAK,CAAC,CAAC;EAC7C;EACA,SAASC,OAAO,GAAG;IACjBH,aAAa,CAACE,MAAM,IAAI,CAAC,GAAGA,MAAM,EAAE,MAAM,CAAC,CAAC;EAC9C;EACA,MAAME,IAAI,GAAGL,UAAU,CAACM,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAK,KAAK,CAAC,CAACC,MAAM;EACzD,MAAMC,MAAM,GAAGT,UAAU,CAACQ,MAAM,GAAGH,IAAI;;EAEvC;;EAEA;EACA,IAAIK,IAAI,GAAGV,UAAU,CAACW,GAAG,CAAC,CAACC,EAAE,EAAEC,GAAG,kBAChC,QAAC,KAAK,CAAC,IAAI;IAAW,SAAS,EAAED,EAAG;IAAA,GAAKb;EAAK,GAA7Bc,GAAG;IAAA;IAAA;IAAA;EAAA,QACrB,CAAC;;EAEF;EACAH,IAAI,CAACI,IAAI,eACP,QAAC,KAAK,CAAC,IAAI;IAET,MAAM,EAAEZ,MAAO;IACf,OAAO,EAAEE,OAAQ;IAAA,GACbL;EAAK,GAHJW,IAAI,CAACF,MAAM;IAAA;IAAA;IAAA;EAAA,QAIhB,CACH;EAED,oBACE;IAAK,SAAS,EAAC,OAAO;IAAA,wBACpB;MAAA,UAAKT,KAAK,CAACgB;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eACtB;MAAA,uBACE;QAAA,UAAIhB,KAAK,CAACiB;MAAW;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QACxB,eACJ;MAAA,WAAG,QACK,EAACX,IAAI,EAAC,kBAAiB,EAACI,MAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAClC,EACHC,IAAI,CAACO,OAAO,EAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACX;AAEV;AAAC,GAxCQnB,KAAK;AAAA,KAALA,KAAK;AA0Cd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}