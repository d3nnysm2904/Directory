Middleware
What is Middleware?
It is code that runs in the middle of the request / response cycle!
In Express, middleware are functions that get access to the req and res objects and can also call the next function.
express.json() is an example of middleware
Our 404 and global error handler are example of middleware
When would you use it?
It opens up the door for separating our code into more logical groupings and providing more robust / abstracted error handling.

Logging useful information on every request
Adding a current_user for every request (like g in Flask!)
Ensuring that users are authenticated
Ensuring that a user is authorized to access an endpoint
What does it look like?
In another file called middleware.js
demo/routing-demo/middleware.js
function logger(req, res, next) {
  console.log(`Sending ${req.method} request to ${req.path}.`);
  return next();
}
Why do we need next?
If we do not include it, we will not make it to the next route!
Notice here we are not passing anything to next.
If argument are passed to next, Express always treats this as an error.
Using our middleware
demo/routing-demo/app.js
const middleware = require("./middleware");

app.use(express.json());

// this applies to all requests at all paths
app.use(middleware.logger);
Writing middleware to authorize
demo/routing-demo/middleware.js
const ExpressError = require("./expressError");

function onlyAllowElie(req, res, next) {
  try {
    if (req.params.name === "Elie") {
      return next();
    } else {
      throw new ExpressError("Unauthorized", 401);
    }
  } catch (err) {
    return next(err);
  }
}

module.exports = { logger, onlyAllowElie };
Using our middleware
demo/routing-demo/app.js
// route handler with middleware
app.get(
  "/hello/:name",
  middleware.onlyAllowElie,
  function(req, res, next) {
    return res.send("Hello " + req.params.name);
  }
);
Using external middleware
Instead of writing our own logger, we will use a more robust one called morgan
When using external middleware, we follow a simple process:
install it - npm install morgan
require it - const morgan = require(“morgan”);
use it - app.use(morgan(‘dev’));
Once you have set up morgan, take a look at your terminal on each request and you will see the route requested, HTTP verb, and much more.
Summarizing Middleware
We’ve already been using built in middleware like express.json()
Middleware are functions that can intercept the request/response cycle
When using external middleware, make sure to first install, require, and then use.
Integration Tests in Express: Setup
Integration Tests
Making sure the parts work together
Essential to have along with unit tests!
More involved than unit tests
Integration Tests with Supertest
A library for testing Express applications
Our tool for integration testing
Like Flask’s test client: can make requests against app in tests
Docs: https://github.com/visionmedia/supertest
Installing Supertest
$ npm i --save-dev supertest
Creating a server.js
To create a test client, we are going to need our app variable from app.js
Right now we are combining logic to create the app variable and start the server all in one file
To ensure we don’t start the server when we import our app variable in our tests, we’re going to move out our app.listen code into a file called server.js
We’re also going to export our app variable in app.js
What our app.js looks like
demo/supertest-demo/app.js
/** general error handler */

app.use((err, req, res, next) => {
  res.status(err.status || 500);

  return res.json({
    error: err.message,
  });
});

module.exports = app;
What our server.js looks like
demo/supertest-demo/server.js
const app = require("./app")

app.listen(3000, function(){
  console.log("Server starting on port 3000")
})